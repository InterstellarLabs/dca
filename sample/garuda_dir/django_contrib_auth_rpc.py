# DO NOT EDIT THIS FILE MANUALLY
# THIS FILE IS AUTO-GENERATED
# MANUAL CHANGES WILL BE DISCARDED
# PLEASE READ GARUDA DOCS
from garuda_dir.garuda_pb2 import Permission, Void  # NOQA
from garuda_dir.django_contrib_auth_crud import (  # NOQA
    read_permission,
    delete_permission,
    create_permission,
    update_permission,
    read_permissions_filter,
)


def permission_to_dict(obj):
    # Cycle through fields directly
    d = {  }
    if obj is None:
        return d
    is_dj_obj = obj.__module__.endswith('models')
    foriegn_keys = ['content_type_id']
    for field in ['codename', 'content_type_id', 'group', 'id', 'name', 'user']:  # NOQA
        value = getattr(obj, field, None)
        if field in [None, 'None']:
            continue
        d[field] = value
        if is_dj_obj and (field == 'id' or field in foriegn_keys):
            d[field] = str(value)
        elif is_dj_obj and field in ['created_on', 'updated_on']:
            d[field] = value.isoformat()
    return d


class PermissionGaruda:

    def ReadPermissionsFilter(self, void, context):
        objs = read_permissions_filter()
        return [Permission(
            **permission_to_dict(obj)) for obj in objs]

    def ReadPermission(self, id, context):
        obj = read_permission(id=id.id)
        return Permission(**permission_to_dict(obj))

    def CreatePermission(self, obj, context):
        obj = create_permission(**permission_to_dict(obj))
        return Permission(**permission_to_dict(obj))

    def UpdatePermission(self, obj, context):
        obj_dict = permission_to_dict(obj)
        del obj_dict['id']
        obj = update_permission(obj.id, **obj_dict)
        return Void()

    def DeletePermission(self, id, context):
        delete_permission(id.id)
        return Void()

from garuda_dir.garuda_pb2 import Group, Void  # NOQA
from garuda_dir.django_contrib_auth_crud import (  # NOQA
    read_group,
    delete_group,
    create_group,
    update_group,
    read_groups_filter,
)


def group_to_dict(obj):
    # Cycle through fields directly
    d = {  }
    if obj is None:
        return d
    is_dj_obj = obj.__module__.endswith('models')
    foriegn_keys = []
    for field in ['id', 'name', 'permissions', 'user']:  # NOQA
        value = getattr(obj, field, None)
        if field in [None, 'None']:
            continue
        d[field] = value
        if is_dj_obj and (field == 'id' or field in foriegn_keys):
            d[field] = str(value)
        elif is_dj_obj and field in ['created_on', 'updated_on']:
            d[field] = value.isoformat()
    return d


class GroupGaruda:

    def ReadGroupsFilter(self, void, context):
        objs = read_groups_filter()
        return [Group(
            **group_to_dict(obj)) for obj in objs]

    def ReadGroup(self, id, context):
        obj = read_group(id=id.id)
        return Group(**group_to_dict(obj))

    def CreateGroup(self, obj, context):
        obj = create_group(**group_to_dict(obj))
        return Group(**group_to_dict(obj))

    def UpdateGroup(self, obj, context):
        obj_dict = group_to_dict(obj)
        del obj_dict['id']
        obj = update_group(obj.id, **obj_dict)
        return Void()

    def DeleteGroup(self, id, context):
        delete_group(id.id)
        return Void()

from garuda_dir.garuda_pb2 import User, Void  # NOQA
from garuda_dir.django_contrib_auth_crud import (  # NOQA
    read_user,
    delete_user,
    create_user,
    update_user,
    read_users_filter,
)


def user_to_dict(obj):
    # Cycle through fields directly
    d = {  }
    if obj is None:
        return d
    is_dj_obj = obj.__module__.endswith('models')
    foriegn_keys = []
    for field in ['date_joined', 'email', 'first_name', 'groups', 'id', 'is_active', 'is_staff', 'is_superuser', 'last_login', 'last_name', 'password', 'user_permissions', 'username']:  # NOQA
        value = getattr(obj, field, None)
        if field in [None, 'None']:
            continue
        d[field] = value
        if is_dj_obj and (field == 'id' or field in foriegn_keys):
            d[field] = str(value)
        elif is_dj_obj and field in ['created_on', 'updated_on']:
            d[field] = value.isoformat()
    return d


class UserGaruda:

    def ReadUsersFilter(self, void, context):
        objs = read_users_filter()
        return [User(
            **user_to_dict(obj)) for obj in objs]

    def ReadUser(self, id, context):
        obj = read_user(id=id.id)
        return User(**user_to_dict(obj))

    def CreateUser(self, obj, context):
        obj = create_user(**user_to_dict(obj))
        return User(**user_to_dict(obj))

    def UpdateUser(self, obj, context):
        obj_dict = user_to_dict(obj)
        del obj_dict['id']
        obj = update_user(obj.id, **obj_dict)
        return Void()

    def DeleteUser(self, id, context):
        delete_user(id.id)
        return Void()